---
import Layout from "../layouts/Layout.astro"

import About from "../components/sections/About.astro"
import Education from "../components/sections/Education.astro"
import Experience from "../components/sections/Experience.astro"
import Hero from "../components/sections/Hero.astro"
import Projects from "../components/sections/Projects.astro"
import Skills from "../components/sections/Skills.astro"
import KeyboardManager from "../components/KeyboardManager.astro"
import { motion } from "framer-motion";
import { LampContainer } from "../components/ui/lamp";
import { basics } from "../../cv.json"
import { Boxes } from "../components/ui/boxes-background"
import ThreejsBall from "../components/sections/ThreejsBall.astro"
const { name, label } = basics
---

<Layout title={`Portafolio de ${name} - ${label}`}>
  <LampContainer client:load>
    <motion.h1
      initial={{ opacity: 0.5, y: 100 }}
      whileInView={{ opacity: 1, y: 0 }}
      transition={{
        delay: 0.3,
        duration: 0.8,
        ease: "easeInOut",
      }}
      className="bg-gradient-to-br from-slate-300 to-slate-500 bg-clip-text tracking-tight"
    >
    </motion.h1>
  </LampContainer>
  <main>
    <div class="snap-container">
        <Boxes client:visible />
        <ThreejsBall />
        <Hero />
        <About />
        <Experience />
        <Education />
        <Projects />
        <Skills />
    </div>
  </main>
  <KeyboardManager />
</Layout>

<style>
  main {
    margin: auto;
    width: 100%;
    background-color: aliceblue;
    overflow-x: hidden;
  }

  .snap-container {
    height: 100vh; /* Altura completa para permitir scroll */
    width: 100%;
    overflow-y: auto;
    overflow-x: hidden;
    scroll-snap-type: y mandatory; /* Activa el scroll-snap vertical */
    scrollbar-width: none; /* Oculta el scroll en Firefox */
    -ms-overflow-style: none; /* Oculta el scroll en IE y Edge */
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 2rem;
    padding: 2rem 0;
  }

  @media (prefers-color-scheme: dark){
    main{
      background-color:black;
    }
  }

  @media (width <= 700px) {
    main {
      padding: 2rem;
    }
    
    .snap-container {
      scroll-snap-type: y proximity; /* Cambia a proximity en móvil para más fluidez */
    }
  }
</style>

<script>
// Script para añadir navegación suave con teclado y detección de sección central
document.addEventListener('DOMContentLoaded', () => {
  const sections = document.querySelectorAll('.snap-section');
  const container = document.querySelector('.snap-container');
  let currentIndex = 0;

  // Función para navegar a una sección específica
  const navigateToSection = (index) => {
    if (index < 0) index = 0;
    if (index >= sections.length) index = sections.length - 1;
    
    currentIndex = index;
    sections[index].scrollIntoView({ behavior: 'smooth' });
  };

  // Función para actualizar qué sección está activa (la más cercana al centro)
  const updateActiveSection = () => {
    if (!container) return;
    
    const containerRect = container.getBoundingClientRect();
    const containerCenter = containerRect.top + containerRect.height / 4;
    
    let closestSectionIndex = 0;
    let minDistance = Infinity;
    
    sections.forEach((section, index) => {
      const sectionRect = section.getBoundingClientRect();
      const sectionCenter = sectionRect.top + sectionRect.height / 2;
      const distance = Math.abs(containerCenter - sectionCenter);
      
      if (distance < minDistance) {
        minDistance = distance;
        closestSectionIndex = index;
      }
    });
    
    // Desactivar todas las secciones primero
    sections.forEach(section => {
      section.classList.remove('in-focus');
    });
    
    // Activar solo la sección más cercana al centro
    if (sections[closestSectionIndex]) {
      sections[closestSectionIndex].classList.add('in-focus');
      if(sections[closestSectionIndex+1] !== undefined){
        sections[closestSectionIndex+1].classList.add('in-focus');
      }
      currentIndex = closestSectionIndex;
    }
  };

  // Evento de teclado para navegar con flechas arriba/abajo
  document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowDown') {
      e.preventDefault();
      navigateToSection(currentIndex + 1);
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      navigateToSection(currentIndex - 1);
    }
  });

  // Escuchar eventos de scroll para actualizar la sección activa
  if (container) {
    // Usar throttle para mejorar rendimiento en scroll
    let scrollTimeout;
    container.addEventListener('scroll', () => {
      if (scrollTimeout) {
        clearTimeout(scrollTimeout);
      }
      
      scrollTimeout = setTimeout(() => {
        updateActiveSection();
      }, 100); // Pequeño retraso para evitar ejecución excesiva durante scroll rápido
    });
    
    // Actualizar la sección activa al cargar la página
    setTimeout(updateActiveSection, 500);
  }
});
</script>
