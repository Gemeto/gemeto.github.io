---
import Layout from "../layouts/Layout.astro"

import About from "../components/sections/About.astro"
import Education from "../components/sections/Education.astro"
import Experience from "../components/sections/Experience.astro"
import Hero from "../components/sections/Hero.astro"
import Projects from "../components/sections/Projects.astro"
import Skills from "../components/sections/Skills.astro"
import KeyboardManager from "../components/KeyboardManager.astro"
import { motion } from "framer-motion";
import { LampContainer } from "../components/ui/lamp";
import { basics } from "../../cv.json"
import { Boxes } from "../components/ui/boxes-background"
import ThreejsBall from "../components/sections/ThreejsBall.astro"
const { name, label } = basics
---

<Layout title={`Portafolio de ${name} - ${label}`}>
  <LampContainer client:load>
    <motion.h1
      initial={{ opacity: 0.5, y: 100 }}
      whileInView={{ opacity: 1, y: 0 }}
      transition={{
        delay: 0.3,
        duration: 0.8,
        ease: "easeInOut",
      }}
      className="bg-gradient-to-br from-slate-300 to-slate-500 bg-clip-text tracking-tight"
    >
    </motion.h1>
  </LampContainer>
  <main>
    <div class="snap-container">
        <Boxes client:visible />
        <ThreejsBall />
        <Hero />
        <About />
        <Experience />
        <Education />
        <Projects />
        <Skills />
    </div>
  </main>
  <KeyboardManager />
</Layout>

<style>
  main {
    margin: auto;
    width: 100%;
    background-color: aliceblue;
    /* Aseguramos que el contenedor principal no tenga overflow que genere scroll */
    overflow: hidden;
    position: relative;
  }

  .snap-container {
    width: 100%;
    /* Eliminamos cualquier propiedad que pueda crear scroll anidado */
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 2rem;
    padding: 2rem 0;
    /* Al igual que el main, aseguramos que no haya overflow */
    overflow: visible;
  }

  @media (prefers-color-scheme: dark){
    main{
      background-color:black;
    }
  }

  @media (width <= 700px) {
    main {
      padding: 2rem;
    }
    
    .snap-container {
      gap: 3rem;
    }
  }
</style>

<script>
// Script para añadir navegación suave con teclado y detección de sección central
document.addEventListener('DOMContentLoaded', () => {
  const sections = document.querySelectorAll('.snap-section');
  let currentIndex = 0;
  let isScrolling = false;
  let userScrolling = false;
  let scrollTimeout;

  // Función para navegar a una sección específica
  const navigateToSection = (index, behavior = 'smooth') => {
    if (index < 0) index = 0;
    if (index >= sections.length) index = sections.length - 1;
    
    currentIndex = index;
    
    // Previene la recursión de eventos de scroll
    isScrolling = true;
    
    // Centra la sección en la ventana
    const section = sections[index];
    const sectionRect = section.getBoundingClientRect();
    const sectionCenter = sectionRect.top + window.scrollY + sectionRect.height / 2;
    const windowCenter = window.innerHeight / 2;
    const scrollToY = sectionCenter - windowCenter;
    
    window.scrollTo({
      top: scrollToY,
      behavior: behavior
    });
    
    // Permite que otros eventos de scroll se procesen después de la animación
    setTimeout(() => {
      isScrolling = false;
    }, behavior === 'smooth' ? 500 : 0);
  };

  // Función para actualizar qué sección está activa (la más cercana al centro)
  const updateActiveSection = () => {
    const windowHeight = window.innerHeight;
    const windowCenter = windowHeight / 2;
    
    let closestSectionIndex = 0;
    let minDistance = Infinity;
    
    sections.forEach((section, index) => {
      const sectionRect = section.getBoundingClientRect();
      const sectionCenter = sectionRect.top + sectionRect.height / 2;
      const distanceFromCenter = Math.abs(windowCenter - sectionCenter);
      
      if (distanceFromCenter < minDistance) {
        minDistance = distanceFromCenter;
        closestSectionIndex = index;
      }
    });
    
    // Desactivar todas las secciones primero
    sections.forEach(section => {
      section.classList.remove('in-focus');
    });
    
    // Activar la sección más cercana al centro
    if (sections[closestSectionIndex]) {
      sections[closestSectionIndex].classList.add('in-focus');
    if(sections[closestSectionIndex-1] !== undefined){
        sections[closestSectionIndex-1].classList.add('in-focus');
    }
      currentIndex = closestSectionIndex;
    }
    
    return closestSectionIndex;
  };
  
  // Verifica si el desplazamiento fue lo suficientemente significativo para activar el centrado
  // En móvil se usa un umbral más alto (modo proximity)
  const shouldCenterSection = (currentSection) => {
    const section = sections[currentSection];
    if (!section) return false;
    
    const sectionRect = section.getBoundingClientRect();
    const sectionCenter = sectionRect.top + sectionRect.height / 2;
    const windowCenter = window.innerHeight / 4;
    const distanceFromCenter = Math.abs(windowCenter - sectionCenter);
    
    // En móvil, usamos un umbral más alto (modo proximity)
    // Si la distancia es menor que 1/4 de la altura de la ventana, no centramos
    const threshold = window.innerHeight * 0.25;
    
    return distanceFromCenter > threshold;
  };

  // Evento de teclado para navegar con flechas arriba/abajo
  document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowDown') {
      e.preventDefault();
      navigateToSection(currentIndex + 1);
      updateActiveSection()
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      navigateToSection(currentIndex - 1);
      updateActiveSection()
    }
  });

  // Detecta scroll iniciado por el usuario
  window.addEventListener('wheel', () => {
    userScrolling = true;
    clearTimeout(scrollTimeout);
  }, { passive: true });
  
  window.addEventListener('touchstart', () => {
    userScrolling = true;
    clearTimeout(scrollTimeout);
  }, { passive: true });

  // Escuchar eventos de scroll global para actualizar la sección activa
  window.addEventListener('scroll', () => {
    if (isScrolling) return; // Ignora eventos de scroll generados por la navegación automática
    
    // Actualiza la sección activa durante el scroll
    const currentSection = updateActiveSection();
    
    // Si el usuario está haciendo scroll, espera a que termine para centrar la sección
    if (userScrolling) {
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(() => {
        userScrolling = false;
        
        // Solo centramos si la sección no está ya casi centrada
        // En móvil esto crea el efecto "proximity"
        if (shouldCenterSection(currentSection)) {
          navigateToSection(currentSection);
        }
      }, 200);
    }
  });
  
  // Actualizar la sección activa al cargar la página
  setTimeout(() => {
    const index = updateActiveSection();
    // Centrar la sección inicial sin animación
    navigateToSection(index, 'auto');
  }, 500);
  
  // Ajustar comportamiento al cambiar el tamaño de la ventana
  window.addEventListener('resize', () => {
    clearTimeout(scrollTimeout);
    // Actualizar la sección activa después de cambiar el tamaño
    setTimeout(() => {
      const index = updateActiveSection();
      if (shouldCenterSection(index)) {
        navigateToSection(index, 'auto');
      }
    }, 200);
  });
});
</script>
